name: "Check duplicates and merge existing"
description: "Check for duplicates within and between existing policy and merge if necessary"
inputs:
  created_yaml:
    description: "list of request yaml(s)"
    required: true
  token:
    description: 'github pat'
    required: true
  repo:
    description: 'github repository'
    required: true

outputs:
  pretty_message:
    description: 'Pretty, markdown-formatted duplicate detection message'
    value: ${{ steps.find_duplicates.outputs.pretty_message }}
  duplicates_detected:
    description: 'True if duplicates found'
    value: ${{ steps.find_duplicates.outputs.duplicates_detected }}
  validated_policy_filenames:
    description: "Space-separated list of filenames that passed validation"
    value: ${{ steps.find_duplicates.outputs.validated_policy_filenames }}

runs:
  using: "composite"
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        clean: false
    
    - name: Get existing policy files to check against new request yaml
      shell: bash
      run: |
        policies_folder=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.token }}" \
          https://api.github.com/repos/${{ inputs.repo }}/contents/infrastructure/policies)
        echo "$policies_folder" | jq -r '.[].name' > policies.txt

    - name: Install deps
      run: |
        python -m pip install -r ${{github.action_path}}/requirements.txt
      shell: bash
    

    - name: Check for duplicates
      id: find_duplicates
      shell: bash
      env: 
        token: ${{ inputs.token }}
        repo: ${{ inputs.repo }}
      run: |
        set -e
        rm -f validated_filenames.txt
        status=0
        for file in ${{ inputs.created_yaml }}; do
          # validator must output: <inputfile> <outputfilename> if pass, or exit 1 on fail
          result=$(python ${{github.action_path}}/yaml-duplicate-validator.py --created_yaml "$file" --token "$token" --repo "$repo")
          exit_code=$?
          if [ $exit_code -eq 0 ]; then
            echo "$result" >> validated_filenames.txt
          else
            cat dupe_output.txt
            status=1
            break
          fi
        done
        # Space-separated filenames for output
        outfiles=$(awk '{print $2}' validated_filenames.txt | tr '\n' ' ')
        echo "pretty_message<<EOF" >> $GITHUB_OUTPUT
        cat dupe_output.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "duplicates_detected=$([ $status -eq 1 ] && echo true || echo false)" >> $GITHUB_OUTPUT
        echo "validated_policy_filenames=$outfiles" >> $GITHUB_OUTPUT
        exit $status
