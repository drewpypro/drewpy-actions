name: "Check duplicates and merge existing"
description: "Check for duplicates within and between existing policy and merge if necessary"
inputs:
  created_yaml:
    description: "list of request yaml(s)"
    required: true
  request_existing_mapping:
    description: "request/existing policy mapping"
    required: true

outputs:
  pretty_message:
    description: 'Pretty, markdown-formatted duplicate detection message'
    value: ${{ steps.find_duplicates.outputs.pretty_message }}
  duplicates_detected:
    description: 'True if duplicates found'
    value: ${{ steps.find_duplicates.outputs.duplicates_detected }}
  validated_policy_filenames:
    description: "Space-separated list of filenames that passed validation"
    value: ${{ steps.find_duplicates.outputs.validated_policy_filenames }}

runs:
  using: "composite"
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        clean: false
    
    - name: Install deps
      run: |
        python -m pip install -r ${{github.action_path}}/requirements.txt
      shell: bash
    
    - name: Check for duplicates
      id: find_duplicates
      shell: bash
      run: |
        set -e
        rm -f dupe_output.txt

        status=0
        MAPPING=$(echo "${{ inputs.request_existing_mapping }}" | tr '|' '\n')
        if [[ -z "$MAPPING" ]]; then
          echo "No mapping provided, nothing to validate."
          echo "pretty_message=ðŸ’¦ No Duplicates detected!" >> $GITHUB_OUTPUT
          echo "duplicates_detected=false" >> $GITHUB_OUTPUT
          echo "validated_policy_filenames=" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Loop in case you add multi-file support later
        while IFS=, read -r request_file existing_file; do
          if [[ -n "$existing_file" ]]; then
            # Capture output and exit code
            if ! python yaml-duplicate-validator.py "$request_file" "$existing_file" > result.txt 2>&1; then
              status=1
              cat result.txt >> dupe_output.txt
            fi
          else
            if ! python yaml-duplicate-validator.py "$request_file" > result.txt 2>&1; then
              status=1
              cat result.txt >> dupe_output.txt
            fi
          fi
        done <<< "$MAPPING"

        # Outputs
        if [[ $status -eq 1 ]]; then
          echo "pretty_message<<EOF" >> $GITHUB_OUTPUT
          cat dupe_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "duplicates_detected=true" >> $GITHUB_OUTPUT
        else
          echo "pretty_message=ðŸ’¦ No Duplicates detected!" >> $GITHUB_OUTPUT
          echo "duplicates_detected=false" >> $GITHUB_OUTPUT
        fi

        # You can set validated_policy_filenames, but for single-file it may be blank or just $request_file
        # If you want to keep the output for compatibility:
        echo "validated_policy_filenames=$request_file" >> $GITHUB_OUTPUT
        exit $status
