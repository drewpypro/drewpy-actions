- name: "good-request-example1-policy"
  request: |
    security_group:
      serviceType: privatelink-consumer
      serviceName: com.amazonaws.vpce.us-east-1.vpce-svc-064ea718f8d0ead77
      thirdpartyName: good-policy1
      thirdPartyID: 12345
      region: us-east-1
    rules:
      - request_id: RQ-001
        source:
          ips:
            - 10.12.1.1/32
            - 10.13.1.1/32
        protocol: tcp
        port: 69
        appid: ssl
        url: https://api.datadoghq.com
  existing: null
  expected_output: |
    ðŸ’¦ No Duplicates detected!
- name: "good-request-example2-policy"
  request: |
    security_group:
      serviceType: privatelink-consumer
      serviceName: com.amazonaws.vpce.us-east-1.vpce-svc-064ea718f8d0ead77
      thirdpartyName: good-policy2
      thirdPartyID: 12345
      region: us-east-1
    rules:
      - request_id: RQ-001
        source:
          ips:
            - 10.12.1.1/32
            - 10.13.1.1/32
        protocol: tcp
        port: 69
        appid: ssl
        url: https://api.datadoghq.com
      - request_id: RQ-001
        source:
          ips:
            - 10.12.1.1/32
            - 10.13.1.1/32
        protocol: tcp
        port: 443
        appid: ssl
        url: https://api.datadoghq.com
  existing: null
  expected_output: |
    ðŸ’¦ No Duplicates detected!
- name: "good-request-example3-policy"
  request: |
    security_group:
      serviceType: privatelink-consumer
      serviceName: com.amazonaws.vpce.us-east-1.vpce-svc-064ea718f8d0ead77
      thirdpartyName: good-policy3
      thirdPartyID: 12345
      region: us-east-1
    rules:
      - request_id: RQ-001
        source:
          ips:
            - 10.12.1.1/32
            - 10.13.1.1/32
        protocol: tcp
        port: 69
        appid: ssl
        url: https://api.datadoghq.com
      - request_id: RQ-001
        source:
          ips:
            - 10.12.1.1/32
            - 10.13.1.1/32
        protocol: tcp
        port: 69
        appid: mongodb
        url: https://api.datadoghq.com
  existing: null
  expected_output: |
    ðŸ’¦ No Duplicates detected!
- name: "good-request-example4-policy"
  request: |
    security_group:
      serviceType: privatelink-consumer
      serviceName: com.amazonaws.vpce.us-east-1.vpce-svc-064ea718f8d0ead77
      thirdpartyName: good-policy4
      thirdPartyID: 12345
      region: us-east-1
    rules:
      - request_id: RQ-001
        source:
          ips:
            - 10.12.1.1/32
            - 10.13.1.1/32
        protocol: tcp
        port: 69
        appid: ssl
        url: https://api.datadoghq.com
      - request_id: RQ-001
        source:
          ips:
            - 10.12.1.1/32
            - 10.13.1.1/32
        protocol: udp
        port: 69
        appid: ssl
        url: https://api.datadoghq.com
  existing: null
  expected_output: |
    ðŸ’¦ No Duplicates detected!
- name: "good-request-example5-policy"
  request: |
    security_group:
      serviceType: privatelink-consumer
      serviceName: com.amazonaws.vpce.us-east-1.vpce-svc-064ea718f8d0ead77
      thirdpartyName: good-policy5
      thirdPartyID: 12345
      region: us-east-1
    rules:
      - request_id: RQ-001
        source:
          ips:
            - 10.12.1.1/32
            - 10.13.1.1/32
        protocol: tcp
        port: 69
        appid: ssl
        url: https://api.datadoghq.com
      - request_id: RQ-001
        source:
          ips:
            - 10.12.1.1/32
            - 10.13.1.1/32
        protocol: tcp
        port: 69
        appid: ssl
        url: https://api.datadoghq2.com
  existing: null
  expected_output: |
    ðŸ’¦ No Duplicates detected!
- name: "good-request-with-existing-example1-policy"
  request: |
    security_group:
      serviceType: privatelink-consumer
      serviceName: com.amazonaws.vpce.us-east-1.vpce-svc-064ea718f8d0ead77
      thirdpartyName: existing-policy
      thirdPartyID: 12345
      region: us-east-1
    rules:
      - request_id: RQ-001
        source:
          ips:
          - 10.11.1.1/32
          - 10.12.1.1/32
          - 10.13.1.1/32
        protocol: tcp
        port: 777
        appid: ssl
        url: https://api.datadoghq.com
      - request_id: RQ-002
        source:
          ips:
          - 10.11.1.2/32
          - 10.12.1.2/32
          - 10.13.1.2/32
        protocol: tcp
        port: 777
        appid: ssl
        url: https://api.datadoghq.com
      - request_id: RQ-003
        source:
          ips:
          - 10.1.1.1/32
        protocol: tcp
        port: 443
        appid: mongodb
        url: https://api.datadoghq.com
  existing: |
    security_group:
      serviceType: privatelink-consumer
      serviceName: com.amazonaws.vpce.us-east-1.vpce-svc-064ea718f8d0ead77
      thirdpartyName: existing-policy
      thirdPartyID: 12345
      region: us-east-1
    rules:
      - request_id: RQ-001
        source:
          ips:
          - 10.11.1.1/32
          - 10.12.1.1/32
          - 10.13.1.1/32
        protocol: tcp
        port: 69
        appid: ssl
        url: https://api.datadoghq.com
      - request_id: RQ-002
        source:
          ips:
          - 10.11.1.2/32
          - 10.12.1.2/32
          - 10.13.1.2/32
        protocol: tcp
        port: 69
        appid: ssl
        url: https://api.datadoghq.com
      - request_id: RQ-003
        source:
          ips:
          - 10.1.1.1/32
        protocol: tcp
        port: 443
        appid: ssl
        url: https://api.datadoghq.com
  expected_output: |
    ðŸ’¦ No Duplicates detected!
- name: "good-request-with-existing-example2-policy"
  request: |
    security_group:
      request_id: RQv1-001
      business_justification: >
        Creating security-group and palo alto rules for thirdparty splunk to enable splunk saas logging required for enterprise visibility operations. 
      accountId: 6666666
      region: us-east-1
      vpc_id: vpc-05ebefacb081c3018
      serviceType: privatelink-consumer
      serviceName: com.amazonaws.vpce.us-east-1.vpce-svc-064ea718f8d0ead77
      thirdpartyName: miro
      thirdPartyID: TP-0013
    rules:
      - request_id: RQv1-001
        business_justification: >
            Creating rules to allow internal hosts to connect to thirdparty splunk to enable splunk saas logging required for enterprise visibility operations. 
        source:
          account_id: 6666666
          vpc_id: vpc-05ebefacb081c3018
          region: us-east-1
          ips:
            - 10.11.1.1/32
            - 10.12.1.1/32
        protocol: tcp
        port: 6969
        appid: ssl
        url: https://api.splunk2.com
        enable_palo_inspection: true
  existing: |
    security_group:
      request_id: RQv1-001
      business_justification: >
        Creating security-group and palo alto rules for thirdparty splunk to enable splunk saas logging required for enterprise visibility operations. 
      accountId: 6666666
      region: us-east-1
      vpc_id: vpc-05ebefacb081c3018
      serviceType: privatelink-consumer
      serviceName: com.amazonaws.vpce.us-east-1.vpce-svc-064ea718f8d0ead77
      thirdpartyName: miro
      thirdPartyID: TP-0013
    rules:
      - request_id: RQv1-001
        business_justification: >
            Creating rules to allow internal hosts to connect to thirdparty splunk to enable splunk saas logging required for enterprise visibility operations. 
        source:
          account_id: 6666666
          vpc_id: vpc-05ebefacb081c3018
          region: us-east-1
          ips:
            - 10.11.1.1/32
            - 10.12.1.1/32
        protocol: tcp
        port: 6969
        appid: ssl
        url: https://api.splunk.com
        enable_palo_inspection: true
  expected_output: |
    ðŸ’¦ No Duplicates detected!